
datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows"]
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model User {
  id           String   @id @default(cuid())
  username     String   @unique
  email        String   @unique
  passwordHash String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  sentFriendRequests     FriendRequest[] @relation("SentFriendRequests")
  receivedFriendRequests FriendRequest[] @relation("ReceivedFriendRequests")

  friendshipsAsUserOne Friendship[] @relation("UserOneFriendships")
  friendshipsAsUserTwo Friendship[] @relation("UserTwoFriendships")

  favoriteMovies       FavoriteItem[]
  recentlyViewedMovies RecentlyViewedItem[]
  movieRatings         UserMovieRating[] // Relation to user-specific ratings/notes
  comments             Comment[]         // Relation to user comments
}

model FriendRequest {
  id          String              @id @default(cuid())
  requesterId String
  requester   User                @relation("SentFriendRequests", fields: [requesterId], references: [id], onDelete: Cascade)
  receiverId  String
  receiver    User                @relation("ReceivedFriendRequests", fields: [receiverId], references: [id], onDelete: Cascade)
  status      FriendRequestStatus @default(PENDING)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  @@unique([requesterId, receiverId])
  @@index([requesterId])
  @@index([receiverId])
}

model Friendship {
  id        String   @id @default(cuid())
  userOneId String
  userOne   User     @relation("UserOneFriendships", fields: [userOneId], references: [id], onDelete: Cascade)
  userTwoId String
  userTwo   User     @relation("UserTwoFriendships", fields: [userTwoId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userOneId, userTwoId]) 
  @@index([userOneId])
  @@index([userTwoId])
}

model Movie {
  id          Int      @id // TMDB Movie ID
  title       String
  posterPath  String?
  releaseDate String?
  overview    String?

  favoritedBy       FavoriteItem[]
  recentlyViewedBy  RecentlyViewedItem[]
  ratedBy           UserMovieRating[] // Relation to user-specific ratings/notes
  comments          Comment[]         // Relation to movie comments
}

model FavoriteItem {
  id        String   @id @default(cuid())
  dateAdded DateTime @default(now())
  movieId   Int
  movie     Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([movieId, userId])
  @@index([userId])
}

model RecentlyViewedItem {
  id        String   @id @default(cuid())
  dateAdded DateTime @default(now()) 
  movieId   Int
  movie     Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([movieId, userId])
  @@index([userId])
}

// New model for user-specific movie ratings and notes
model UserMovieRating {
  id        String   @id @default(cuid())
  rating    Int?     // User's rating 
  notes     String?  // User's personal notes
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  movieId   Int
  movie     Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, movieId]) // Each user can rate/note a movie once
  @@index([userId])
  @@index([movieId])
}

// New model for movie comments
model Comment {
  id        String   @id @default(cuid())
  content   String   // The comment text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  movieId   Int
  movie     Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([movieId]) // Index for faster comment retrieval by movie
  @@index([userId])  // Index for faster comment retrieval by user
}
